type Project {
  projectId: String!
  taskType: TaskType!
  name: String!
  objectClassNames:[String]!
  instructionsText: String
  instructionsImageURL: String
  instructionsVideoURL: String
}

type ProjectList {
  entries: [Project]
  nextPageToken: String
}

type ImageList {
  entries: [File]
  nextPageToken: String
}

enum CollaboratorProfile {
  PROJECT_MANAGER
  IMAGE_TAGGER
}

type Collaborator {
  projectId: String!
  collaboratorId: String!
  name: String!
  email: String!
  profile: CollaboratorProfile!
}

type CollaboratorInvite {
  inviteId: String!
  inviteURL: String!
  collaborator: Collaborator
}

type CollaboratorList {
  entries: [Collaborator]
  nextPageToken: String
}

type Model {
  projectId: String!
  modelId: String!
  created: String!
  status: String!
  modelURL: String
}

type ModelList {
  entries: [Model]
  nextPageToken: String
}

type TrainingSession {
  trainingSessionId: String!
  projectId: String!
}

type Query {
  projects(nextPageToken:String): ProjectList
  project(projectId: String!): Project
  trainingImages(projectId: String!, nextPageToken: String): ImageList
  collaborators(projectId: String!): CollaboratorList
  models(projectId: String!): ModelList
}

input ConfirmedFile {
  projectId: String!
  fileId: String!
}

type Mutation {
  createProject(name: String!, taskType: TaskType!, objectClassNames:[String]!, instructionsText:String):Project
  updateProject(projectId: String!, name: String, taskType: TaskType, objectClassNames:[String], instructionsText:String):Project
  removeProject(projectId: String!):String

  createInstructionsImage(projectId: String!): File
  commitInstructionsImage(image:ConfirmedFile!): String

  createTrainingImage(projectId: String!): File
  commitTrainingImage(projectId: String!, fileId: String!): File

  createCollaborator(projectId: String!, name: String!, email: String!, profile: CollaboratorProfile!): CollaboratorInvite
  reinviteCollaborator(projectId: String!, collaboratorId: String!): CollaboratorInvite
  deleteCollaborator(projectId: String!, collaboratorId: String!): String

  createModel(projectId: String!): Model
  removeModel(projectId: String!, modelId: String!): String

}
